The primary goal of the "SCALA Widget Toolkit" (or "SCALa Abstract Widget
Toolkit" if you will) is to provide a way to write user interfaces (UIs) not
just for different operating systems but for different environments, too.
Developers want to write UIs only once and users want to run applications
wherever they currently are, be it console, windowing system, web browser, ...
this toolkit extends "write once, run anywhere" by "write once, use anywhere".

 ----------------------------------------------------------------------
   thoughts and ideas about this project
 ----------------------------------------------------------------------

Java's AWT (Swing, too, since it is based on AWT) lacks the ability to work
without an X server. It also lacks scala features above all mixin composition
which I believe can be quite powerful for widgets that naturally come with
certain "traits", e.g. being "focusable".

Handling I/O (input events, drawing) will depend on different implementations,
i.e. (sub)projects. Users than can configure which they want to use when the
application gets started (propably depending on an environment variable like
SDLs SDL_VIDEODRIVER).

For the I/O implementations I am thinking about using libraries like Cairo,
DirectFB or SDL which all support many systems (especially SDL). I also would
like to support text user interfaces (TUIs) via e.g. ncurses as well as web
user interfaces for web browsers.

Also it would be kinda awesome to use Actors for concurrency instead of the an
EDT -- I don't know whether or not this can be achieved at all -- just
spitballing here -- though it would be nice to do things like:

    val button = ...
    button ! ReceiveFocus
    button ! HandleInput('a', Shift)

 ----------------------------------------------------------------------
   roadmap
 ----------------------------------------------------------------------

1   basic widget logic and basic widgets
2   configuration and abstract I/O
3   println-based I/O implementation for specs and testing
4   release 0.1
5   from here on
5.1 real I/O implementations
5.2 more complicated widgets

 ----------------------------------------------------------------------
   how I had the idea
 ----------------------------------------------------------------------

Being a Linux user I learned to embrace the console (and my keyboard) because
one can do >>> almost <<< anything using it and quite a lot faster than with a
mouse in a windowing system. Well >>> almost <<< because (graphical) user
interfaces aka GUIs are a necessity for some tasks, e.g. photoshopping, web
browsing, digital audio editing, ... but starting/running an X server just for
these tasks always seemed like wasting resources (especially using a notebook
with limited power supply).

Why are there so few applications I can run without an X server? Right, because
rarely developers want to write them for systems only a minority of people use,
totally understandable -- I wouldn't want to do it, too, though I would like to
have awesome user interfaces for certain tasks, too, like everyone else. There
should be a way to develop UIs in an environment independent manner ...
